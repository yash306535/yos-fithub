<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Plans List</title>
    <style>
        body {
            font-family: 'Arial', sans-serif;
            margin: 0;
            padding: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            height: 100vh;
            background-color: #f1f1f1;
        }

        .plans-list-container {
            background-color: #cacaca6e;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            animation: fadeIn 0.5s ease-in-out;
            width: 80%;
            text-align: center;
            max-height: 600px; /* Set a maximum height */
            overflow-y: auto; /* Add a vertical scrollbar if needed */
            position: relative; /* Add position relative */
        }

        h2 {
            color: #333;
        }

        .plans-list {
            display: flex;
            flex-wrap: wrap;
            justify-content: space-around;
        }

        .plan-card {
            width: calc(25% - 20px);
            margin: 10px;
            box-sizing: border-box;
            text-align: center;
            border: 1px solid #ba2323;
            border-radius: 8px;
            padding: 10px;
            box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);
            background-color: #fff;
            transition: transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
            position: relative;
        }

        .plan-card:hover {
            transform: scale(1.1);
            box-shadow: 0 0 20px #ff6800;
        }

        .plan-card img {
            max-width: 100%;
            height: auto;
            border-radius: 4px;
        }

        p {
            color: #333;
            margin-top: 10px;
        }

        .buy-plan-button {
            display: block;
            margin: 10px auto;
            padding: 8px 16px;
            font-size: 16px;
            font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
            border-radius: 4cm;
            font-style: bold;
            background-color: #333;
            color: #fff;
            text-decoration: none;
            cursor: pointer;
            transition: background-color 0.3s ease, color 0.3s ease; /* Added transition for smooth color change */
        }

        .buy-plan-button:hover {
            background-color: #f41616;
            color: #000000;
        }

        .sort-select {
            position: absolute;
            top: 10px;
            right: 10px;
        }

        #sortSelect {
            padding: 8px;
            border: 1px solid #333;
            border-radius: 4px;
            background-color: #fff;
            color: #333;
            font-size: 14px;
            cursor: pointer;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
            }
            to {
                opacity: 1;
            }
        }
    </style>
    <link rel="stylesheet" href="" integrity="<KEY>" crossorigin="anonymous">
</head>
<body onload="display()">
 
    <div class="plans-list-container">
        <h2>Our Plans</h2>
        <div class="sort-select">
            <label for="sortSelect">Sort by:</label>
            <select id="sortSelect" onchange="sortPlans()">
                <option value="lowToHigh">Price: Low to High</option>
                <option value="highToLow">Price: High to Low</option>
            </select>
        </div>
        <div class="plans-list" id="plansList"></div>
    </div>

    <script>
        const plansData = [];
    
        for (let i = 1; i <= 100; i++) {
            const plan = {
                id: i,
                name: `Plan ${i}`,
                price: Math.floor(Math.random() * 100) + 50,
                duration: `${Math.floor(Math.random() * 12) + 1} months`,
                trainer: `Trainer ${i}`,
            };
    
            plansData.push(plan);
        }
    
        function createPlanCard(plan) {
            const cardDiv = document.createElement('div');
            cardDiv.classList.add('plan-card');
    
            const nameParagraph = document.createElement('p');
            nameParagraph.textContent = `Plan: ${plan.name}`;
    
            const priceParagraph = document.createElement('p');
            priceParagraph.textContent = `Price: $${plan.price}`;
    
            const durationParagraph = document.createElement('p');
            durationParagraph.textContent = `Duration: ${plan.duration}`;
    
            const trainerParagraph = document.createElement('p');
            trainerParagraph.textContent = `Trainer: ${plan.trainer}`;
    
            const buyButton = document.createElement('a');
            buyButton.classList.add('buy-plan-button');
            buyButton.textContent = 'Buy Plan';
            buyButton.href = 'payment.html';
    
            cardDiv.appendChild(nameParagraph);
            cardDiv.appendChild(priceParagraph);
            cardDiv.appendChild(durationParagraph);
            cardDiv.appendChild(trainerParagraph);
            cardDiv.appendChild(buyButton);
    
            return cardDiv;
        }
    
        function initializePlansList() {
            const plansListContainer = document.getElementById('plansList');
    
            plansData.forEach(plan => {
                const planCard = createPlanCard(plan);
                plansListContainer.appendChild(planCard);
            });
        }
    
        function sortPlans() {
            const sortSelect = document.getElementById('sortSelect');
            const selectedOption = sortSelect.value;
    
            const plansListContainer = document.getElementById('plansList');
            const planCards = plansListContainer.querySelectorAll('.plan-card');
    
            const sortedPlanCards = Array.from(planCards).sort((a, b) => {
                const planA = plansData.find(plan => plan.id === parseInt(a.dataset.planId));
                const planB = plansData.find(plan => plan.id === parseInt(b.dataset.planId));
    
                if (selectedOption === 'lowToHigh') {
                    return planA.price - planB.price;
                } else if (selectedOption === 'highToLow') {
                    return planB.price - planA.price;
                }
            });
    
            plansListContainer.innerHTML = ''; // Clear the container
    
            sortedPlanCards.forEach(card => {
                plansListContainer.appendChild(card);
            });
        }
    
        document.addEventListener('DOMContentLoaded', () => {
            initializePlansList();
        });
    </script>
        <script>
function display()
{
    document.addEventListener('contextmenu',event=>event.preventDefault());
}
</script>
</body>
</html>
